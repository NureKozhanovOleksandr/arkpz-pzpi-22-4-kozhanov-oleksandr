Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра програмної інженерії



Звіт
до лабораторної роботи №1 
з дисципліни "Аналіз та рефакторинг коду"
на тему: "Розробка Vision & Scope"




Виконав ст. гр. ПЗПІ-22-4
Кожанов Олександр Юрійович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
 





Харків 2024
 
МЕТА

Розробити документ Vision & Scope для програмної системи контролю стану тварин в клініках.

ХІД РОБОТИ

У ході виконання лабораторної роботи було проведено детальне опрацювання концепції програмної системи контролю стану тварин в клініках. Визначено актуальність проблеми, зокрема труднощі, з якими стикаються клініки під час лікування тварин, такі як низька автоматизація, ймовірність помилок та складність інтеграції з існуючими сервісами. 
Сформульовано мету системи – спрощення обліку тварин у клініках, а також окреслено функціонал, який включає автоматизацію процесів, інтеграцію з вимірювальними пристроями, трекінг стану тварин та аналітику.
Було описано функціональність серверної частини, ІоТ клієнта, веб клієнта та мобільного клієнта.
Визначено програмні засоби та програмні інструменти, які будуть використані у проєкті.
Створений текст документа стосується програмної системи контролю стану тварин в клініках та представлений у Додатку А.
 
ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено документ Vision & Scope для програмної системи контролю стану тварин в клініках. Визначено актуальні проблеми, які система повинна вирішити, а також основні функціональні можливості, що дозволяють підвищити ефективність догляду тварин. Детально описано вимоги до кожної частини системи. 
ДОДАТОК А
VISION AND SCOPE DOCUMENT (КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ)

1 BUSINESS REQUIREMENTS (БІЗНЕС-ВИМОГИ)

1.1	Background (Передумови)

У сучасних ветеринарних клініках існує потреба в автоматизованій системі для моніторингу стану тварин, що дозволить знижувати людські помилки, покращити ефективність роботи персоналу та забезпечити більш точне лікування тварин. 
На сьогоднішній день клініки використовують застарілі методи ведення записів, що ускладнює процес відстеження стану тварин. Це призводить до неефективного використання часу лікарів та персоналу, а також збільшує ймовірність помилок при введенні даних.

1.2	Business Opportunity (Бізнес-можливості)

Ринок ветеринарних послуг має великий потенціал для впровадження інноваційних технологій. Програмна система для контролю стану тварин дозволить клінікам покращити якість обслуговування, автоматизувати процеси, зменшити час на обробку інформації та забезпечити доступ до історії хвороби тварин у будь-який час.

 
2	VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)

2.1	Vision Statement (Окреслення Концепції)

Ми прагнемо створити інноваційну програмну систему, яка дозволить ветеринарним клінікам автоматизувати процеси моніторингу стану тварин, покращити якість обслуговування та знизити кількість помилок. Система має бути інтуїтивно зрозумілою та зручною у використанні для ветеринарів і персоналу клініки.

2.2	Major Features (Головна Функціональність)

1.	Автоматичний збір та обробка даних про стан здоров'я тварин, що дозволяє швидко реагувати на зміни в стані тварини;
2.	Веб-інтерфейс для доступу до історії хвороб, що дозволяє персоналу швидко отримати всю необхідну інформацію;
3.	Сповіщення про критичні показники здоров’я тварин, що дозволяє оперативно вжити заходів;
4.	Інтеграція з іншими системами клініки, такими як система запису на прийом або управління запасами ліків.

 
3	SCOPE AND LIMITATIONS (РАМКИ ТА ОБМЕЖЕННЯ)

3.1	Scope of Initial Release (Рамки Первинного Випуску)

Початковий реліз системи буде зосереджений на основних функціях, необхідних для початку роботи клініки з новою платформою. Цей реліз забезпечить базову функціональність, яка дозволить користувачам реєструвати тварин, вести облік їхнього здоров’я та отримувати важливі сповіщення.
1.	Реєстрація тварин у системі:
Кожна тварина, яка привозиться до клініки, буде зареєстрована в системі з урахуванням її основних даних, таких як порода, вік, вага, інформація про власника та інші важливі відомості. Це дозволить персоналу швидко знайти потрібну інформацію та забезпечити правильний облік тварин;
2.	Введення та оновлення даних про стан здоров’я тварин:
Лікарі та медичний персонал зможуть вводити інформацію про стан здоров’я тварин, діагнози, проведені процедури та призначення. Це дозволить вести повний медичний облік і забезпечити своєчасне оновлення даних. Крім того, система надасть можливість відстежувати зміни в стані здоров’я тварини протягом часу, що допоможе приймати більш обґрунтовані рішення;
3.	Сповіщення про критичні стани:
Система буде автоматично відслідковувати ключові показники здоров’я тварин, наприклад, температуру, пульс, рівень цукру в крові, і надсилати сповіщення ветеринарам та іншому медичному персоналу у разі виявлення критичних змін. Це дозволить клініці оперативно реагувати на будь-які зміни в стані тварини, що знижує ризики та підвищує ефективність лікування.

 
3.2	Scope of Subsequent Releases (Рамки Наступних Випусків)


Після запуску початкової версії системи, наступні релізи будуть спрямовані на розширення функціональності та інтеграцію з іншими системами клініки для забезпечення більш комплексного підходу до управління здоров'ям тварин.
1.	Інтеграція з іншими системами клінік:
У наступних релізах планується інтеграція з іншими програмними продуктами, які використовуються в клініках, наприклад, системами запису на прийом та бухгалтерськими системами. Це дозволить забезпечити безперервний потік інформації між різними відділами клініки, що покращить ефективність роботи персоналу та зменшить кількість помилок, пов’язаних з дублюванням даних;
2.	Розширення функцій для аналізу здоров’я на основі історичних даних:
Система буде розвиватися, включаючи можливість аналізу здоров’я тварин на основі зібраних історичних даних. Використовуючи алгоритми машинного навчання та статистики, система зможе створювати прогнози про можливі проблеми зі здоров’ям тварин, а також надавати рекомендації для ветеринарів щодо лікування. Це дозволить клінікам покращити якість обслуговування та зменшити ймовірність пропуску важливих проблем у здоров'ї тварин.

 
4	BUSINESS CONTEXT (БІЗНЕС КОНТЕКСТ)

4.3 Operating Environment (Робоче Середовище)

Backend:
Для серверної частини системи буде використовуватися Node.js, оскільки ця платформа дозволяє ефективно обробляти велику кількість одночасних запитів завдяки асинхронному виконанню операцій. Це забезпечить високу продуктивність і масштабованість системи, навіть при високих навантаженнях. Express буде використовуватися як основний фреймворк для створення RESTful API. Він є легким і гнучким, що дозволяє швидко налаштовувати маршрути, обробляти запити та інтегрувати middleware для різних потреб, таких як логування чи обробка помилок.
Для зберігання даних обрана MongoDB, що є NoSQL базою даних. Вона дозволяє гнучко працювати з великими обсягами даних і легко масштабувати систему. MongoDB добре підходить для зберігання даних, які можуть змінюватися або мають складну структуру, що робить її ідеальним вибором для нашої системи.
Для зручності роботи з MongoDB буде використовуватися Mongoose, бібліотека, яка спрощує взаємодію з базою даних, надаючи інтерфейси для створення схем, валідації даних та їх маніпуляцій. Це дозволить зменшити кількість помилок і зробить код чистішим і зручнішим для підтримки.
Для забезпечення безпеки та аутентифікації користувачів буде застосовуватись JWT (JSON Web Token). Цей механізм дозволяє безпечно передавати дані між клієнтом і сервером у вигляді токенів, що забезпечує захищений доступ до різних частин системи, зокрема до особистих даних користувачів та адміністративних функцій.
 
Frontend (Web):
Для веб-версії додатку буде використано React, популярну бібліотеку для створення інтерфейсів користувача. Вона дозволяє створювати швидкі, інтерактивні додатки завдяки компонентному підходу. Для управління станом додатку використовується Redux та Redux Toolkit, що дозволяє централізовано зберігати і змінювати дані додатку, спрощуючи обробку складних взаємодій між компонентами.
Для обробки запитів до серверу та кешування даних застосовуватиметься RTK Query, що покращує продуктивність і дозволяє ефективно працювати з API. Для зручності роботи з формами та їх валідацією використовуватимуться Formik та Yup, що дозволяють створювати форми з перевіркою введених даних. Стилізація інтерфейсу здійснюватиметься за допомогою Material UI, що надає набір готових компонентів для створення стильних та зручних інтерфейсів.
Mobile:
Мобільний додаток буде розроблений на Kotlin для платформи Android. Kotlin є сучасною, безпечною та високопродуктивною мовою програмування, яка дозволяє створювати швидкі та надійні додатки для Android. Це дасть змогу максимально використовувати можливості операційної системи Android, забезпечуючи високу ефективність і безпеку додатку.
Для управління станом мобільного додатку буде використано Redux та Redux Toolkit, що дозволяє централізовано зберігати та обробляти дані додатку. Це забезпечить зручне керування даними на різних екранах і дозволить легко обробляти складні взаємодії між компонентами. Для створення та валідації форм буде застосовуватись Formik та Yup, що дозволяє створювати зручні для користувача форми з перевіркою введених даних.
Стилізація мобільного інтерфейсу здійснюватиметься за допомогою React Native Material, що дозволяє створювати сучасні та зручні інтерфейси, що відповідають стандартам дизайну для мобільних додатків.
IoT:
Для інтеграції з пристроями Інтернету Речей (IoT) буде використовуватись протокол MQTT для обміну даними між пристроями та сервером. Це дозволить забезпечити надійну передачу даних в реальному часі, що є критично важливим для системи автоматизації замовлень. Також буде використано Node-RED для візуального програмування та управління потоками даних між пристроями та сервером. 
ДОДАТОК Б
Відео на YouTube

https://youtu.be/IPV_lM8tsHA
