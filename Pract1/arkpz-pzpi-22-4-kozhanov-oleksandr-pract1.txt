Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт 
з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»
за темою «Правила оформлення програмного коду»



Роботу виконав
ст. гр. ПЗПІ-22-4 
Кожанов Олександр Юрійович

Перевірив
ст. викл. каф. ПІ 
Сокорчук Ігор Петрович




Харків 2024
 
МЕТА

Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування Ruby, а також навчитися аналізувати та рефакторити код для покращення його якості.

ВСТУП

Ruby — це сучасна мова програмування, яка створена з акцентом на продуктивність розробників і читабельність коду. Її синтаксис, орієнтований на мінімалізм і зрозумілість, дозволяє створювати елегантні та ефективні рішення. Завдяки своїй універсальності Ruby знайшла широке застосування у веб-розробці, автоматизації процесів і побудові програмних інструментів.
Незважаючи на простоту, яку пропонує Ruby, для підтримання високої якості коду важливо дотримуватися певних рекомендацій і стандартів. Вони допомагають зберігати структуру проєктів зрозумілою, спрощують спільну роботу в командах і забезпечують зручність подальшої підтримки та розвитку. У Ruby особливий акцент робиться на читабельності, тому правила оформлення коду спрямовані на створення зрозумілих та логічно структурованих програм.
Частина цих рекомендацій є універсальними для багатьох мов програмування, наприклад, принципи об’єктно-орієнтованого дизайну чи правила іменування змінних. Інші ж — унікальні для Ruby та враховують її синтаксичні й функціональні особливості. Важливо пам’ятати, що ці правила можуть змінюватися залежно від потреб конкретного проєкту чи команди.
Нижче представлені рекомендації допоможуть вам краще зрозуміти підхід до написання коду на Ruby та дозволять створювати чисті, підтримувані й ефективні програми.
 
РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ

Рекомендація: Структуруйте код
Опис: Використовуйте стандартну структуру каталогів (наприклад, app/models, app/controllers Кожен клас має одну відповідальність (Single Responsibility Principle). Для спільного функціоналу використовуйте модулі. Використовуйте Ruby-doc для коментарів методів. Розділяйте логічні секції коду коментарями.
Приклад: 
# поганий приклад
class User; end
class Admin; end
class Product; end

# гарний приклад  
# app/models/user.rb
class User; end

# app/models/admin.rb
class Admin; end

# app/models/product.rb
class Product; end


Рекомендація: Форматуйте код
Опис: Використовуйте два пробіли для відступів. Довжина рядка максимум 80 символів. Для блоків використовуйте do...end або {...} (залежно від контексту). [1]
Приклад: 
# поганий приклад 
def hello_world() puts "Hello, world!" end  

# гарний приклад  
def hello_world  
  puts "Hello, world!"  
end
 
Рекомендація: Використовуйте загальноприйняте іменування
Опис: Використовуйте snake_case для змінних і методів. Притримуйтесь CamelCase для класів та модулів. Константи записуються великими літерами (наприклад MAX_RETRIES). [1]
Приклад: 
# поганий приклад  
class myclass; end
def mymethod; end
some_variable = 42

# гарний приклад  
class MyClass; end
def my_method; end
some_variable = 42


Рекомендація: Використовуйте коментарі
Опис: Коли використовувати:
•	для пояснення нетривіальної логіки;
•	для документування API.
Уникайте очевидних або надлишкових коментарів. [1]
Приклад: 
# поганий приклад
# Ітеруємо масив  
array.each { |item| puts item }

# гарний приклад  
# Виводимо список продуктів  
products.each { |product| puts product.name }  


Рекомендація: Використовуйте документування коду
Опис: Використовуйте інструменти, як-от RDoc або Yard. Описуйте параметри, повернення та приклади використання. [1]
 
Приклад: 
# поганий приклад
def add(a, b)
  a + b
end

# гарний приклад  
# Adds two numbers together.
# @param [Integer] a The first number
# @param [Integer] b The second number
# @return [Integer] The sum of the two numbers
def add(a, b)
  a + b
end

Рекомендація: Використовуйте метод Test-Driven Development (TDD)
Опис: Основи TDD:
1.	напишіть тест
2.	реалізуйте код
3.	рефакторіть.
Використовуйте інструменти тестування RSpec, Minitest. [2]
Приклад: 
# поганий приклад
class Calculator
  def add(a, b)
    a + b
  end
end

# гарний приклад
# calculator.rb
class Calculator
  def add(a, b)
    a + b
  end
end

# calculator_spec.rb
RSpec.describe Calculator do
  it 'adds two numbers' do
    expect(Calculator.new.add(2, 3)).to eq(5)
  end
end

Рекомендація: Використовуйте інструменти для забезпечення якості коду
Опис: RuboCop для перевірки стилю. SimpleCov для аналізу покриття тестами. Code Climate для оцінки складності та читабельності. [3]
Приклад: 
# поганий приклад
def bad_example
puts "Hello, world!"
end

# гарний приклад
def good_example
  puts 'Hello, world!'
end

# RuboCop: ruby -rubocop
# SimpleCov: додаємо у spec_helper.rb
require 'simplecov'
SimpleCov.start



 
ВИСНОВКИ

Мова програмування Ruby пропонує значні можливості для створення зрозумілого, підтримуваного та ефективного коду. Завдяки своєму мінімалістичному синтаксису та гнучкості, Ruby дозволяє програмістам зосередитися на вирішенні задач, а не на технічних деталях реалізації.
Основні правила написання якісного коду на Ruby спрямовані на підвищення читабельності, спрощення спільної роботи в командах і забезпечення зручності подальшої підтримки проєктів. Іменування змінних, методів і класів повинно бути інтуїтивно зрозумілим і послідовним, що сприяє легкому розумінню коду навіть новими членами команди. Форматування коду має бути логічним і відповідати прийнятим стандартам, щоб полегшити читання та аналіз.
Грамотне використання вбудованих конструкцій Ruby, таких як блоки, ітератори та модулі, дозволяє створювати ефективні рішення без зайвої складності. Водночас важливо дотримуватися принципів об’єктно-орієнтованого дизайну, таких як Single Responsibility Principle, для збереження чіткості та логічності архітектури проєкту.
Інструменти, такі як RuboCop і RSpec, забезпечують додатковий контроль якості коду та допомагають дотримуватися найкращих практик. Завдяки цим рекомендаціям, розробники можуть створювати стабільний і добре організований код, який відповідає сучасним стандартам програмування.
 
ДОДАТОК А
Список використаних джерел

1.	Ruby Style Guide. URL: https://rubystyle.guide (date of access: 13.12.2024).
2.	RSpec: URL: https://rspec.info (date of access: 13.12.2024).
3.	RuboCop: URL: https://rubocop.org (date of access: 13.12.2024).
 
ДОДАТОК Б
Відео на YouTube

https://youtu.be/aFH6UBp-aSY
 
ДОДАТОК B
Презентація
