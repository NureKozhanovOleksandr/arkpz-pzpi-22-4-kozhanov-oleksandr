Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт 
з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»
за темою «Методи рефакторингу коду програмного забезпечення»



Роботу виконав
ст. гр. ПЗПІ-22-4 
Кожанов Олександр Юрійович

Перевірив
ст. викл. каф. ПІ 
Сокорчук Ігор Петрович





Харків 2024
 
МЕТА

Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

ВСТУП

Рефакторинг — це процес покращення коду без зміни його зовнішньої поведінки, що спрямований на підвищення його якості. Він є невід'ємною частиною розробки програмного забезпечення, адже дозволяє усунути технічний борг, зменшити складність коду та зробити його більш зрозумілим для розробників.
Рефакторинг допомагає створювати підтримувані й ефективні програми, що мають чітку структуру та логіку. Завдяки цьому процесу розробники можуть уникати дублювання коду, забезпечувати його модульність і полегшувати подальше розширення функціоналу [1].
Методи рефакторингу є універсальними інструментами, які можуть бути застосовані до різних мов програмування та типів проєктів [1]. Вони включають як базові техніки, наприклад, покращення іменування змінних або виділення методів, так і складніші підходи, такі як заміна умовної логіки на поліморфізм або переведення простих значень у повноцінні об'єкти.
У цій роботі розглянуто три методи рефакторингу. На основі реальних прикладів із програмних проєктів показано, як застосування цих методів може значно підвищити читабельність, ефективність та підтримуваність коду, а також зробити його більш зрозумілим для інших членів команди. 
 
ПРИКЛАДИ ВИКОРИСТАННЯ МЕТОДІВ РЕФАКТОРИНГУ

Приклад 1: Метод рефакторингу Change Value to Reference 
Опис проблеми: У проекті є клас User, який представляє користувача. Для кожного користувача створюється новий об'єкт, навіть якщо вони мають однаковий ID. Це призводить до дублювання даних і ускладнює синхронізацію змін. Наприклад, якщо оновити ім'я користувача, ці зміни не будуть відображені в усіх об'єктах із тим самим ID.
Код до рефакторингу: 
// код до рефакторингу
{
  class User {
    constructor(id, name) {
      this.id = id;
      this.name = name;
    }
  }

  const user1 = new User(1, "Alice");
  const user2 = new User(1, "Alice");

  console.log(user1 === user2); // false
}

Використання методу Change Value to Reference: Метод Change Value to Reference усуває дублювання даних, створюючи єдиний екземпляр об'єкта для кожної унікальної сутності. Це досягається через використання репозиторію, який керує створенням і доступом до об'єктів.
Код після рефакторингу [2]: 
// код після рефакторингу
{
  class User {
    constructor(id, name) {
      this.id = id;
      this.name = name;
    }
  }

  class UserRepository {
    constructor() {
      this.users = new Map();
    }

    getUser(id, name) {
      if (!this.users.has(id)) {
        this.users.set(id, new User(id, name));
      }
      return this.users.get(id);
    }
  }

  const userRepo = new UserRepository();
  const user1 = userRepo.getUser(1, "Alice");
  const user2 = userRepo.getUser(1, "Alice");

  console.log(user1 === user2); // true
}

Переваги отриманого коду: 
1.	Усунення дублювання даних: тепер для кожного унікального ID існує лише один об'єкт;
2.	Полегшення синхронізації: зміни в одному місці автоматично відображаються у всіх посиланнях на об'єкт;
3.	Ефективність використання пам'яті: зменшено кількість об'єктів у пам'яті;
4.	Читабельність і підтримуваність: використання репозиторію спрощує управління об'єктами.

Приклад 2: Метод рефакторингу Replace Parameter with Explicit Methods 
Опис проблеми: У проекті є функція calculateDiscount(), яка приймає параметр type для визначення типу знижки. Використання параметра робить код менш читабельним і створює ризик помилок, якщо передано некоректне значення.

Код до рефакторингу: 
// код до рефакторингу
{
  function calculateDiscount(type, amount) {
    if (type === "student") {
      return amount * 0.8;
    } else if (type === "senior") {
      return amount * 0.85;
    } else if (type === "regular") {
      return amount * 0.9;
    } else {
      throw new Error("Invalid discount type");
    }
  }

  console.log(calculateDiscount("student", 100)); // 80
  console.log(calculateDiscount("senior", 100));  // 85
  console.log(calculateDiscount("regular", 100)); // 90
}

Використання методу Replace Parameter with Explicit Methods: Метод Replace Parameter with Explicit Methods дозволяє замінити параметр окремими методами для кожного типу знижки. Це робить код більш читабельним і дозволяє легко додавати нові типи знижок без зміни існуючої логіки.
Код після рефакторингу [2]: 
{
  class DiscountCalculator {
    static studentDiscount(amount) {
      return amount * 0.8;
    }
    static seniorDiscount(amount) {
      return amount * 0.85;
    }
    static regularDiscount(amount) {
      return amount * 0.9;
    }
  }

  console.log(DiscountCalculator.studentDiscount(100)); // 80
  console.log(DiscountCalculator.seniorDiscount(100));  // 85
  console.log(DiscountCalculator.regularDiscount(100)); // 90
}

 
Переваги отриманого коду: 
1.	Покращення читабельності: логіка кожного типу знижки тепер ізольована в окремому методі;
2.	Зменшення ймовірності помилок: неможливо передати некоректний параметр;
3.	Легкість розширення: додавання нових типів знижок не потребує змін у наявних методах;
4.	Підтримуваність: код став більш модульним і простим для тестування.

Приклад 3: Метод рефакторингу Replace Data Value with Object 
Опис проблеми: У проекті є клас Order, який зберігає інформацію про замовлення. У кожному замовленні є поле customer, яке містить лише ім'я клієнта у вигляді рядка. Це обмежує можливість додавання додаткової інформації про клієнта (наприклад, контактні дані або історію замовлень) і призводить до дублювання коду.
Код до рефакторингу: 
// код до рефакторингу
{
  class Order {
    constructor(customer, amount) {
      this.customer = customer;
      this.amount = amount;
    }

    getCustomer() {
      return this.customer;
    }
  }

  const order = new Order("Alice", 100);
  console.log(order.getCustomer()); // Alice
}

Використання методу Replace Data Value with Object: Метод Replace Data Value with Object дозволяє замінити просте значення (ім'я клієнта) об'єктом, який інкапсулює всю інформацію про клієнта [1]. Це дозволяє додати додаткову логіку та уникнути дублювання коду.
Код після рефакторингу [2]: 
// код після рефакторингу
{
  class Customer {
    constructor(name) {
      this.name = name;
      this.orderHistory = [];
    }
  
    addOrder(order) {
      this.orderHistory.push(order);
    }
  
    getOrderHistory() {
      return this.orderHistory;
    }
  }
  
  class Order {
    constructor(customer, amount) {
      this.customer = customer;
      this.amount = amount;
      this.customer.addOrder(this);
    }
  
    getCustomerName() {
      return this.customer.name;
    }
  }
  
  const customer = new Customer("Alice");
  const order = new Order(customer, 100);
  console.log(order.getCustomerName()); // Alice
  console.log(customer.getOrderHistory()); // [Order]
}

Переваги отриманого коду: 
1.	Інкапсуляція: уся інформація про клієнта тепер зберігається в одному місці;
2.	Легкість розширення: можна додати нові властивості та методи для клієнта без змін у класі Order;
3.	Зменшення дублювання: логіка, пов'язана з клієнтами, більше не дублюється;
4.	Покращення структури: код став більш організованим і підтримуваним.



 
ВИСНОВКИ

Рефакторинг коду є невід'ємною частиною процесу розробки програмного забезпечення, що забезпечує його якість, читабельність і підтримуваність. Цей процес дозволяє вирішувати проблеми дублювання, складності підтримки та обмеженості розширення, зберігаючи при цьому функціональність програмного продукту.
Застосування методів рефакторингу, таких як Replace Nested Conditional with Guard Clauses, Replace Parameter with Explicit Methods та Replace Data Value with Object, показує, як можна ефективно перетворювати складний і громіздкий код у більш організований, структурований і зрозумілий. Це не лише полегшує спільну роботу в командах, але й дозволяє швидше адаптувати програму до нових вимог чи змін.
Покращення коду через рефакторинг знижує ризик помилок, робить програму масштабованою і стабільною у довгостроковій перспективі. Зрозумілий і підтримуваний код сприяє швидшому розумінню проєкту новими членами команди, що є особливо важливим у великих або тривалих проєктах.
Крім того, рефакторинг допомагає розробникам дотримуватися принципів чистого коду, таких як Single Responsibility Principle або DRY (Don't Repeat Yourself). Це дозволяє створювати рішення, які відповідають сучасним стандартам розробки та забезпечують високу якість програмного забезпечення.
Отже, рефакторинг — це не лише технічний процес, а й стратегічний інструмент, який допомагає створювати стабільні, ефективні й масштабовані програмні рішення, що відповідають потребам користувачів і бізнесу.
 
ДОДАТОК А
Список використаних джерел

1.	Мартін Фаулер. "Refactoring: Improving the Design of Existing Code". – Pearson Education, 2018.
2.	Офіційна документація JavaScript. URL: https://developer.mozilla.org. (date of access: 14.12.2024).
 
ДОДАТОК Б
Відео на YouTube

https://youtu.be/mG9e-akyaSg 

ДОДАТОК B
Презентація